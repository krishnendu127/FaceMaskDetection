# -*- coding: utf-8 -*-
"""FaceMaskDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IGsAxuLAi3izXXRH_1FsmBtKrUFgl_WT
"""

!pip install kaggle

#configuring the path of kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#dataset api
!kaggle datasets download -d omkargurav/face-mask-dataset

#extracting the compresed dataset
from zipfile import ZipFile
dataset='/content/face-mask-dataset.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('the dataset is extracted')

!ls

"""Importing the dependencies"""

import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

with_mask_files=os.listdir('/content/data/with_mask')
print(with_mask_files[0:5])

without_mask_files=os.listdir('/content/data/without_mask')
print(without_mask_files[0:5])

print('number of images with mask :', len(with_mask_files))
print('number of images without mask :', len(without_mask_files))

"""Creating Labels

Image with mask->1
Image without mask ->0
"""

#creating the labels
#creating two lists
with_mask_labels= [1]*3725  #creates a list with 1 as a value and when multiplied with 3725 it creates a list with 3725 elements all with values one
without_mask_labels=[0]*3828

#combining both labels
labels= with_mask_labels + without_mask_labels
print(len(labels))

"""Displaying the images

"""

#displaying with mask image
img=mpimg.imread('/content/data/with_mask/with_mask_1345.jpg')
imgplot=plt.imshow(img)
plt.show()

#displaying without mask
img=mpimg.imread('/content/data/without_mask/without_mask_1345.jpg')
imgplot=plt.imshow(img)
plt.show()

"""Image processing

1.resize the images
2.convert the images to numpy arrays
"""

#convert the images to numpy arrays
#for with mask
with_mask_path='/content/data/with_mask/'
data=[]

for img_file in with_mask_files:
  image= Image.open(with_mask_path + img_file)
  image = image.resize((128,128))
  image=image.convert('RGB')
  image=np.array(image)
  data.append(image)

#for without mask
without_mask_path='/content/data/without_mask/'


for img_file in without_mask_files:
  image= Image.open(without_mask_path + img_file)
  image = image.resize((128,128))
  image=image.convert('RGB')
  image=np.array(image)
  data.append(image)

type(data)

len(data)

type(data[0])

# converting image list and label list to numpy arrays

x=np.array(data)
y=np.array(labels)

print(x.shape)

print(y.shape)

"""Train Test Split"""

x_train,x_test,y_train,y_test= train_test_split(x,y, test_size=0.2, random_state=5)

print(x.shape, x_train.shape, x_test.shape)

x_train_scaled=x_train/255
x_test_scaled=x_test/255

x_train_scaled[0]

"""Building a convolutional neural network(cnn)"""

import tensorflow as tf
from tensorflow import keras

num_of_classes=2

model=keras.Sequential()

model.add(keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(128,128,3)))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Flatten())

model.add(keras.layers.Dense(128, activation='relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(64, activation='relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(num_of_classes, activation='sigmoid'))

#compile the neural network
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['acc'])

#training the neural network
history=model.fit(x_train_scaled, y_train, validation_split=0.1, epochs=5)

loss, accuracy=model.evaluate(x_test_scaled, y_test)
print('test accuracy=', accuracy)

"""building a predictive system"""

input_image_path=input('')

input_image=cv2.imread(input_image_path)
cv2_imshow(input_image)
input_image_resized=cv2.resize(input_image,(128,128))

input_image_scaled=input_image_resized/255
input_image_reshaped=np.reshape(input_image_scaled, [1,128,128,3])
input_prediction=model.predict(input_image_reshaped)

print(input_prediction)

input_pred_label=np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label==1:
  print('the person in the image is wearing a mask')

else:
  print('the preson in the image is not wearing a mask')

